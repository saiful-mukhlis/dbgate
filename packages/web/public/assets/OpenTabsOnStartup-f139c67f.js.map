{"version":3,"file":"OpenTabsOnStartup-f139c67f.js","sources":["../../src/utility/OpenTabsOnStartup.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import { openFavorite } from '../appobj/FavoriteFileAppObject.svelte';\n  import runCommand from '../commands/runCommand';\n  import ErrorMessageModal from '../modals/ErrorMessageModal.svelte';\n  import { showModal } from '../modals/modalTools';\n  import { openedTabs } from '../stores';\n\n  import { getConfig, getConnectionList, useFavorites } from './metadataLoaders';\n  import openNewTab from './openNewTab';\n  import { showSnackbarInfo } from './snackbar';\n\n  $: favorites = useFavorites();\n  let opened = false;\n\n  onMount(() => {\n    openOnStartup($favorites);\n  });\n\n  $: openOnStartup($favorites);\n\n  async function openOnStartup(list) {\n    if (!list) return;\n    if (opened) return;\n\n    opened = true;\n\n    const { hash } = document.location;\n    const openFavoriteName = hash && hash.startsWith('#favorite=') ? hash.substring('#favorite='.length) : null;\n    const openTabdata = hash && hash.startsWith('#tabdata=') ? hash.substring('#tabdata='.length) : null;\n\n    if (openFavoriteName) {\n      const open = list.find(x => x.urlPath == openFavoriteName);\n      if (open) {\n        openFavorite(open);\n        window.history.replaceState(null, null, ' ');\n      }\n    } else if (openTabdata) {\n      try {\n        const json = JSON.parse(decodeURIComponent(openTabdata));\n        openFavorite(json);\n        window.history.replaceState(null, null, ' ');\n      } catch (err) {\n        showModal(ErrorMessageModal, { message: err.message });\n      }\n    } else if (!$openedTabs.find(x => x.closedTime == null)) {\n      for (const favorite of list.filter(x => x.openOnStartup)) {\n        openFavorite(favorite);\n      }\n    }\n\n    if (!$openedTabs.find(x => x.closedTime == null) && !(await getConnectionList()).find(x => !x.unsaved)) {\n      openNewTab({\n        title: 'New Connection',\n        icon: 'img connection',\n        tabComponent: 'ConnectionTab',\n      });\n    }\n\n    const config = await getConfig();\n    const appVersion = localStorage.getItem('appVersion');\n    if (appVersion && appVersion != config.version) {\n      runCommand('tabs.changelog');\n      showSnackbarInfo(`DbGate upgraded from version ${appVersion} to version ${config.version}`);\n    }\n    localStorage.setItem('appVersion', config.version);\n  }\n</script>\n"],"names":["__awaiter","thisArg","_arguments","P","generator"],"mappings":"uUAAiB,IAAAA,EAAA,MAAA,KAAA,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA"}