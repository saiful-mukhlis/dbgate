{"version":3,"file":"CellDataWidget-a6df8f75.js","sources":["../../src/celldata/HtmlCellView.svelte","../../src/celldata/JsonCellView.svelte","../../src/celldata/MapCellView.svelte","../../src/celldata/PictureCellView.svelte","../../src/celldata/TextCellView.svelte","../../src/widgets/CellDataWidget.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import _ from 'lodash';\n\n  export let selection;\n</script>\n\n{@html selection\n  .map(cell => {\n    const { value } = cell;\n    if (_.isPlainObject(value) || _.isArray(value)) return JSON.stringify(value, undefined, 2);\n    return cell.value;\n  })\n  .join('\\n')}\n","<script lang=\"ts\">\n  import _ from 'lodash';\n  import ErrorInfo from '../elements/ErrorInfo.svelte';\n  import JSONTree from '../jsontree/JSONTree.svelte';\n\n  export let selection;\n  export let showWholeRow = false;\n\n  let json = null;\n  let error = null;\n\n  $: try {\n    if (showWholeRow) {\n      if (selection?.length == 1) {\n        json = selection[0].rowData;\n      } else {\n        json = selection.map(x => x.rowData);\n      }\n    } else {\n      const value = selection[0].value;\n      json = _.isPlainObject(value) || _.isArray(value) ? value : JSON.parse(value);\n    }\n    error = null;\n  } catch (err) {\n    error = err.message;\n  }\n</script>\n\n{#if error}\n  <ErrorInfo message=\"Error parsing JSON\" alignTop />\n{:else}\n  <div class=\"outer\">\n    <div class=\"inner\">\n      <JSONTree value={json} expanded />\n    </div>\n  </div>\n{/if}\n\n<style>\n  .outer {\n    flex: 1;\n    position: relative;\n  }\n  .inner {\n    overflow: scroll;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n  }\n</style>\n","<script lang=\"ts\">\n  import _ from 'lodash';\n  import SelectionMapView, { findAllObjectPaths, findLatPaths, findLonPaths } from '../elements/SelectionMapView.svelte';\n  import SelectField from '../forms/SelectField.svelte';\n\n  export let selection;\n\n  $: latitudeFields = _.uniq(_.flatten(selection.map(x => findLatPaths(x.rowData)))) as string[];\n  $: longitudeFields = _.uniq(_.flatten(selection.map(x => findLonPaths(x.rowData)))) as string[];\n  $: allFields = _.uniq(_.flatten(selection.map(x => findAllObjectPaths(x.rowData)))) as string[];\n\n  let latitudeField = '';\n  let longitudeField = '';\n\n  $: {\n    if (latitudeFields.length > 0 && !allFields.includes(latitudeField)) {\n      latitudeField = latitudeFields[0];\n    }\n  }\n  $: {\n    if (longitudeFields.length > 0 && !allFields.includes(longitudeField)) {\n      longitudeField = longitudeFields[0];\n    }\n  }\n</script>\n\n<div class=\"container\">\n  {#if allFields.length >= 2}\n    <div>\n      Lat:\n      <SelectField\n        isNative\n        options={allFields.map(x => ({ label: x, value: x }))}\n        value={latitudeField}\n        on:change={e => {\n          latitudeField = e.detail;\n        }}\n      />\n      Lon:\n      <SelectField\n        isNative\n        options={allFields.map(x => ({ label: x, value: x }))}\n        value={longitudeField}\n        on:change={e => {\n          longitudeField = e.detail;\n        }}\n      />\n    </div>\n  {/if}\n\n  <SelectionMapView {selection} {latitudeField} {longitudeField} />\n</div>\n\n<style>\n  .container {\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n  }\n</style>\n","<script lang=\"ts\">\n  import _ from 'lodash';\n  import ErrorInfo from '../elements/ErrorInfo.svelte';\n\n  export let selection;\n\n  function extractPicture(values) {\n    try {\n      const value = values;\n      if (value?.type == 'Buffer' && _.isArray(value?.data)) {\n        return 'data:image/png;base64, ' + btoa(String.fromCharCode.apply(null, value?.data));\n      }\n      return null;\n    } catch (err) {\n      console.log('Error showing picture', err);\n      return null;\n    }\n  }\n\n  $: picture = extractPicture(selection[0]?.value);\n</script>\n\n{#if picture}\n  <div class=\"wrapper\">\n    <img src={picture} />\n  </div>\n{:else}\n  <ErrorInfo message=\"Error showing picture\" alignTop />\n{/if}\n\n<style>\n  .wrapper {\n    overflow: auto;\n    /* position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0; */\n  }\n</style>\n","<script lang=\"ts\">\n  import _ from 'lodash';\n\n  export let selection;\n  export let wrap;\n</script>\n\n<textarea\n  class=\"flex1\"\n  {wrap}\n  readonly\n  value={selection\n    .map(cell => {\n      const { value } = cell;\n      if (_.isPlainObject(value) || _.isArray(value)) return JSON.stringify(value, undefined, 2);\n      return cell.value;\n    })\n    .join('\\n')}\n/>\n","<script lang=\"ts\" context=\"module\">\n  import { isWktGeometry } from 'dbgate-tools';\n\n  const formats = [\n    {\n      type: 'textWrap',\n      title: 'Text (wrap)',\n      component: TextCellViewWrap,\n      single: false,\n    },\n    {\n      type: 'text',\n      title: 'Text (no wrap)',\n      component: TextCellViewNoWrap,\n      single: false,\n    },\n    {\n      type: 'json',\n      title: 'Json',\n      component: JsonCellView,\n      single: true,\n    },\n    {\n      type: 'jsonRow',\n      title: 'Json - Row',\n      component: JsonRowView,\n      single: false,\n    },\n    {\n      type: 'picture',\n      title: 'Picture',\n      component: PictureCellView,\n      single: true,\n    },\n    {\n      type: 'html',\n      title: 'HTML',\n      component: HtmlCellView,\n      single: false,\n    },\n    {\n      type: 'map',\n      title: 'Map',\n      component: MapCellView,\n      single: false,\n    },\n  ];\n\n  function autodetect(selection) {\n    if (selectionCouldBeShownOnMap(selection)) {\n      return 'map';\n    }\n\n    if (selection[0]?.engine?.databaseEngineTypes?.includes('document')) {\n      return 'jsonRow';\n    }\n\n    const value = selection.length == 1 ? selection[0].value : null;\n    if (_.isString(value)) {\n      if (value.startsWith('[') || value.startsWith('{')) return 'json';\n    }\n    if (_.isPlainObject(value) || _.isArray(value)) {\n      return 'json';\n    }\n    return 'textWrap';\n  }\n\n  let cellSelectionListener = null;\n\n  export const getCellSelectionListener = () => cellSelectionListener;\n</script>\n\n<script lang=\"ts\">\n  import _ from 'lodash';\n  import HtmlCellView from '../celldata/HtmlCellView.svelte';\n  import JsonCellView from '../celldata/JsonCellView.svelte';\n  import JsonRowView from '../celldata/JsonRowView.svelte';\n  import MapCellView from '../celldata/MapCellView.svelte';\n  import PictureCellView from '../celldata/PictureCellView.svelte';\n  import TextCellViewNoWrap from '../celldata/TextCellViewNoWrap.svelte';\n  import TextCellViewWrap from '../celldata/TextCellViewWrap.svelte';\n  import ErrorInfo from '../elements/ErrorInfo.svelte';\n  import { selectionCouldBeShownOnMap } from '../elements/SelectionMapView.svelte';\n  import SelectField from '../forms/SelectField.svelte';\n  import { selectedCellsCallback } from '../stores';\n  import WidgetTitle from './WidgetTitle.svelte';\n\n  let selectedFormatType = 'autodetect';\n\n  export let selection = undefined;\n\n  $: autodetectFormatType = autodetect(selection);\n  $: autodetectFormat = formats.find(x => x.type == autodetectFormatType);\n\n  $: usedFormatType = selectedFormatType == 'autodetect' ? autodetectFormatType : selectedFormatType;\n  $: usedFormat = formats.find(x => x.type == usedFormatType);\n\n  $: selection = $selectedCellsCallback ? $selectedCellsCallback() : [];\n</script>\n\n<div class=\"wrapper\">\n  <WidgetTitle>Cell data view</WidgetTitle>\n  <div class=\"main\">\n    <div class=\"toolbar\">\n      Format:<span>&nbsp;</span>\n      <SelectField\n        isNative\n        value={selectedFormatType}\n        on:change={e => (selectedFormatType = e.detail)}\n        options={[\n          { value: 'autodetect', label: `Autodetect - ${autodetectFormat.title}` },\n          ...formats.map(fmt => ({ label: fmt.title, value: fmt.type })),\n        ]}\n      />\n    </div>\n    <div class=\"data\">\n      {#if usedFormat.single && selection?.length != 1}\n        <ErrorInfo message=\"Must be selected one cell\" alignTop />\n      {:else if usedFormat == null}\n        <ErrorInfo message=\"Format not selected\" alignTop />\n      {:else if !selection || selection.length == 0}\n        <ErrorInfo message=\"No data selected\" alignTop />\n      {:else}\n        <svelte:component this={usedFormat?.component} {selection} />\n      {/if}\n    </div>\n  </div>\n</div>\n\n<style>\n  .wrapper {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .main {\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n  }\n\n  .toolbar {\n    display: flex;\n    background: var(--theme-bg-1);\n    align-items: center;\n    border-bottom: 1px solid var(--thene-border);\n    margin: 2px;\n  }\n\n  .data {\n    display: flex;\n    flex: 1;\n    position: relative;\n  }\n</style>\n"],"names":["raw_value","ctx","dirty","html_tag","cell","value","insert","target","div1","anchor","append","div0","func","func_1","div","selectfield0_changes","selectfield1_changes","create_if_block","x","e","latitudeField","longitudeField","attr","img","img_src_value","_a","textarea","textarea_value_value","switch_value","formats","div3","div2","span","fmt","change_handler","$$invalidate","selectedFormatType"],"mappings":"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"}