{"version":3,"file":"AppFolderList-08b1557a.js","sources":["../../src/appobj/AppFolderAppObject.svelte","../../src/widgets/AppFolderList.svelte"],"sourcesContent":["<script lang=\"ts\" context=\"module\">\n  export const extractKey = data => data.name;\n  export const createMatcher = data => filter => filterName(filter, data.name);\n</script>\n\n<script lang=\"ts\">\n  import _, { find } from 'lodash';\n  import { filterName } from 'dbgate-tools';\n\n  import { currentApplication, currentDatabase } from '../stores';\n\n  import AppObjectCore from './AppObjectCore.svelte';\n  import { showModal } from '../modals/modalTools';\n  import ConfirmModal from '../modals/ConfirmModal.svelte';\n  import InputTextModal from '../modals/InputTextModal.svelte';\n  import { apiCall } from '../utility/api';\n  import { useConnectionList } from '../utility/metadataLoaders';\n\n  export let data;\n\n  $: connections = useConnectionList();\n\n  const handleDelete = () => {\n    showModal(ConfirmModal, {\n      message: `Really delete application ${data.name}?`,\n      onConfirm: () => {\n        apiCall('apps/delete-folder', { folder: data.name });\n      },\n    });\n  };\n\n  const handleRename = () => {\n    const { name } = data;\n\n    showModal(InputTextModal, {\n      value: name,\n      label: 'New application name',\n      header: 'Rename application',\n      onConfirm: async newFolder => {\n        await apiCall('apps/rename-folder', {\n          folder: data.name,\n          newFolder: newFolder,\n        });\n        if ($currentApplication == data.name) {\n          $currentApplication = newFolder;\n        }\n      },\n    });\n  };\n\n  function setOnCurrentDb(value) {\n    apiCall('connections/update-database', {\n      conid: $currentDatabase?.connection?._id,\n      database: $currentDatabase?.name,\n      values: {\n        [`useApp:${data.name}`]: value,\n      },\n    });\n  }\n\n  function createMenu() {\n    return [\n      { text: 'Delete', onClick: handleDelete },\n      { text: 'Rename', onClick: handleRename },\n\n      $currentDatabase && [\n        !isOnCurrentDb($currentDatabase, $connections) && {\n          text: 'Enable on current database',\n          onClick: () => setOnCurrentDb(true),\n        },\n        isOnCurrentDb($currentDatabase, $connections) && {\n          text: 'Disable on current database',\n          onClick: () => setOnCurrentDb(false),\n        },\n      ],\n    ];\n  }\n\n  function isOnCurrentDb(currentDb, connections) {\n    if (!currentDb || !connections) return false;\n    const conn = connections.find(x => x._id == currentDb?.connection?._id);\n    const db = conn?.databases?.find(x => x.name == currentDb?.name);\n    return db && db[`useApp:${data.name}`];\n  }\n</script>\n\n<AppObjectCore\n  {...$$restProps}\n  {data}\n  title={data.name}\n  icon={'img app'}\n  statusIcon={isOnCurrentDb($currentDatabase, $connections) ? 'icon check' : null}\n  statusTitle={`Application ${data.name} is used for database ${$currentDatabase?.name}`}\n  isBold={data.name == $currentApplication}\n  on:click={() => ($currentApplication = data.name)}\n  menu={createMenu}\n/>\n","<script lang=\"ts\">\n  import _ from 'lodash';\n\n  import AppObjectList from '../appobj/AppObjectList.svelte';\n  import * as appFolderAppObject from '../appobj/AppFolderAppObject.svelte';\n  import runCommand from '../commands/runCommand';\n  import CloseSearchButton from '../buttons/CloseSearchButton.svelte';\n\n  import InlineButton from '../buttons/InlineButton.svelte';\n\n  import SearchBoxWrapper from '../elements/SearchBoxWrapper.svelte';\n  import SearchInput from '../elements/SearchInput.svelte';\n  import FontIcon from '../icons/FontIcon.svelte';\n  import { apiCall } from '../utility/api';\n  import { useAppFolders } from '../utility/metadataLoaders';\n  import WidgetsInnerContainer from './WidgetsInnerContainer.svelte';\n\n  let filter = '';\n\n  $: folders = useAppFolders();\n\n  const handleRefreshFolders = () => {\n    apiCall('apps/refresh-folders');\n  };\n</script>\n\n<SearchBoxWrapper>\n  <SearchInput placeholder=\"Search applications\" bind:value={filter} />\n  <CloseSearchButton bind:filter />\n  <InlineButton on:click={() => runCommand('new.application')} title=\"Create new application\">\n    <FontIcon icon=\"icon plus-thick\" />\n  </InlineButton>\n  <InlineButton on:click={handleRefreshFolders} title=\"Refresh application list\">\n    <FontIcon icon=\"icon refresh\" />\n  </InlineButton>\n</SearchBoxWrapper>\n<WidgetsInnerContainer>\n  <AppObjectList list={_.sortBy($folders, 'name')} module={appFolderAppObject} {filter} />\n</WidgetsInnerContainer>\n"],"names":["ctx","_a","dirty","this","__awaiter","thisArg","_arguments","P","generator","$currentApplication","data","_","appFolderAppObject","appobjectlist_changes","filter","value","click_handler","runCommand"],"mappings":"8dAuFMA,EAAW,CAAA,cAER,CAAA,MAAAA,KAAK,IAAI,QACV,SAAS,cACHA,EAAa,CAAA,EAACA,EAAgB,CAAA,EAAEA,EAAY,CAAA,CAAA,EAAI,aAAe,OAC/C,YAAA,eAAAA,EAAK,CAAA,EAAA,IAAI,0BAAyBC,EAAAD,OAAA,YAAAC,EAAkB,IAAI,YAC5ED,EAAI,CAAA,EAAC,MAAQA,EAAmB,CAAA,SAElCA,EAAU,CAAA,CAAA,6LARZA,EAAW,CAAA,CAAA,mBAERE,EAAA,GAAA,CAAA,MAAAF,KAAK,IAAI,yBAEJA,EAAa,CAAA,EAACA,EAAgB,CAAA,EAAEA,EAAY,CAAA,CAAA,EAAI,aAAe,YAC/C,YAAA,eAAAA,EAAK,CAAA,EAAA,IAAI,0BAAyBC,EAAAD,OAAA,YAAAC,EAAkB,IAAI,kBAC5ED,EAAI,CAAA,EAAC,MAAQA,EAAmB,CAAA,eAElCA,EAAU,CAAA,CAAA,iGA/FgBG,YAAAA,WAAA,qOAKjB,IAAAC,EAAA,MAAA,KAAA,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA,i0CAyFEC,EAAsBC,EAAK,KAAID,CAAA,8zBCnEWT,EAAM,CAAA,IAAA,iBAANA,EAAM,CAAA,6XAKzCA,EAAoB,CAAA,CAAA,mNALeA,EAAM,CAAA,keAU5C,KAAAW,EAAE,OAAOX,KAAU,MAAM,SAAWY,iFAApCV,EAAA,IAAAW,EAAA,KAAAF,EAAE,OAAOX,KAAU,MAAM,2vBAVac,EAAMC,kCAEnC,MAAAC,EAAA,IAAAC,GAAW,iBAAiB"}