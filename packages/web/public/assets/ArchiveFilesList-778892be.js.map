{"version":3,"file":"ArchiveFilesList-778892be.js","sources":["../../src/appobj/ArchiveFileAppObject.svelte","../../src/widgets/ArchiveFilesList.svelte"],"sourcesContent":["<script lang=\"ts\" context=\"module\">\n  function openArchive(fileName, folderName) {\n    openNewTab({\n      title: fileName,\n      icon: 'img archive',\n      tooltip: `${folderName}\\n${fileName}`,\n      tabComponent: 'ArchiveFileTab',\n      props: {\n        archiveFile: fileName,\n        archiveFolder: folderName,\n      },\n    });\n  }\n\n  async function openTextFile(fileName, fileType, folderName, tabComponent, icon) {\n    const connProps: any = {};\n    let tooltip = undefined;\n\n    const resp = await apiCall('files/load', {\n      folder: 'archive:' + folderName,\n      file: fileName + '.' + fileType,\n      format: 'text',\n    });\n\n    openNewTab(\n      {\n        title: fileName,\n        icon,\n        tabComponent,\n        tooltip,\n        props: {\n          savedFile: fileName + '.' + fileType,\n          savedFolder: 'archive:' + folderName,\n          savedFormat: 'text',\n          archiveFolder: folderName,\n          ...connProps,\n        },\n      },\n      { editor: resp }\n    );\n  }\n\n  export const extractKey = data => data.fileName;\n  export const createMatcher =\n    ({ fileName }) =>\n    filter =>\n      filterName(filter, fileName);\n  const ARCHIVE_ICONS = {\n    'table.yaml': 'img table',\n    'view.sql': 'img view',\n    'proc.sql': 'img procedure',\n    'func.sql': 'img function',\n    'trigger.sql': 'img sql-file',\n    'matview.sql': 'img view',\n  };\n\n  function getArchiveIcon(data) {\n    if (data.fileType == 'jsonl') {\n      return 'img archive';\n    }\n    return ARCHIVE_ICONS[data.fileType];\n  }\n</script>\n\n<script lang=\"ts\">\n  import _ from 'lodash';\n  import { filterName } from 'dbgate-tools';\n  import ImportExportModal from '../modals/ImportExportModal.svelte';\n  import { showModal } from '../modals/modalTools';\n\n  import { getExtensions } from '../stores';\n\n  import createQuickExportMenu from '../utility/createQuickExportMenu';\n  import { exportQuickExportFile } from '../utility/exportFileTools';\n  import openNewTab from '../utility/openNewTab';\n  import AppObjectCore from './AppObjectCore.svelte';\n  import InputTextModal from '../modals/InputTextModal.svelte';\n  import ConfirmModal from '../modals/ConfirmModal.svelte';\n  import { apiCall } from '../utility/api';\n\n  export let data;\n\n  const handleRename = () => {\n    showModal(InputTextModal, {\n      value: data.fileName,\n      label: 'New file name',\n      header: 'Rename file',\n      onConfirm: newFile => {\n        apiCall('archive/rename-file', {\n          file: data.fileName,\n          folder: data.folderName,\n          fileType: data.fileType,\n          newFile,\n        });\n      },\n    });\n  };\n\n  const handleDelete = () => {\n    showModal(ConfirmModal, {\n      message: `Really delete file ${data.fileName}?`,\n      onConfirm: () => {\n        apiCall('archive/delete-file', {\n          file: data.fileName,\n          folder: data.folderName,\n          fileType: data.fileType,\n        });\n      },\n    });\n  };\n  const handleOpenArchive = () => {\n    openArchive(data.fileName, data.folderName);\n  };\n  const handleClick = () => {\n    if (data.fileType == 'jsonl') {\n      handleOpenArchive();\n    }\n    if (data.fileType.endsWith('.sql')) {\n      handleOpenSqlFile();\n    }\n    if (data.fileType.endsWith('.yaml')) {\n      handleOpenYamlFile();\n    }\n  };\n  const handleOpenSqlFile = () => {\n    openTextFile(data.fileName, data.fileType, data.folderName, 'QueryTab', 'img sql-file');\n  };\n  const handleOpenYamlFile = () => {\n    openTextFile(data.fileName, data.fileType, data.folderName, 'YamlEditorTab', 'img yaml');\n  };\n  const handleOpenJsonLinesText = () => {\n    openTextFile(data.fileName, data.fileType, data.folderName, 'JsonLinesEditorTab', 'img json');\n  };\n\n  function createMenu() {\n    return [\n      data.fileType == 'jsonl' && { text: 'Open', onClick: handleOpenArchive },\n      data.fileType == 'jsonl' && { text: 'Open in text editor', onClick: handleOpenJsonLinesText },\n      { text: 'Delete', onClick: handleDelete },\n      { text: 'Rename', onClick: handleRename },\n      data.fileType == 'jsonl' &&\n        createQuickExportMenu(\n          fmt => async () => {\n            exportQuickExportFile(\n              data.fileName,\n              {\n                functionName: 'archiveReader',\n                props: {\n                  fileName: data.fileName,\n                  folderName: data.folderName,\n                },\n              },\n              fmt\n            );\n          },\n          {\n            text: 'Export',\n            onClick: () => {\n              showModal(ImportExportModal, {\n                initialValues: {\n                  sourceStorageType: 'archive',\n                  sourceArchiveFolder: data.folderName,\n                  sourceList: [data.fileName],\n                },\n              });\n            },\n          }\n        ),\n      data.fileType.endsWith('.sql') && { text: 'Open SQL', onClick: handleOpenSqlFile },\n      data.fileType.endsWith('.yaml') && { text: 'Open YAML', onClick: handleOpenYamlFile },\n      data.fileType == 'jsonl' && {\n        text: 'Open in profiler',\n        submenu: getExtensions()\n          .drivers.filter(eng => eng.profilerFormatterFunction)\n          .map(eng => ({\n            text: eng.title,\n            onClick: () => {\n              openNewTab({\n                title: 'Profiler',\n                icon: 'img profiler',\n                tabComponent: 'ProfilerTab',\n                props: {\n                  jslidLoad: `archive://${data.folderName}/${data.fileName}`,\n                  engine: eng.engine,\n                  // profilerFormatterFunction: eng.profilerFormatterFunction,\n                  // profilerTimestampFunction: eng.profilerTimestampFunction,\n                  // profilerChartAggregateFunction: eng.profilerChartAggregateFunction,\n                  // profilerChartMeasures: eng.profilerChartMeasures,\n                },\n              });\n            },\n          })),\n      },\n    ];\n  }\n</script>\n\n<AppObjectCore\n  {...$$restProps}\n  {data}\n  title={data.fileLabel}\n  icon={getArchiveIcon(data)}\n  menu={createMenu}\n  on:click={handleClick}\n/>\n","<script lang=\"ts\" context=\"module\">\n  const ARCHIVE_LABELS = {\n    jsonl: 'JSON table data',\n    'table.yaml': 'Tables',\n    'view.sql': 'Views',\n    'proc.sql': 'Procedures',\n    'func.sql': 'Functions',\n    'trigger.sql': 'Triggers',\n    'matview.sql': 'Materialized views',\n  };\n</script>\n\n<script lang=\"ts\">\n  import { createFreeTableModel } from 'dbgate-datalib';\n\n  import _ from 'lodash';\n\n  import AppObjectList from '../appobj/AppObjectList.svelte';\n  import * as archiveFileAppObject from '../appobj/ArchiveFileAppObject.svelte';\n  import CloseSearchButton from '../buttons/CloseSearchButton.svelte';\n  import DropDownButton from '../buttons/DropDownButton.svelte';\n\n  import InlineButton from '../buttons/InlineButton.svelte';\n\n  import SearchBoxWrapper from '../elements/SearchBoxWrapper.svelte';\n  import SearchInput from '../elements/SearchInput.svelte';\n  import FontIcon from '../icons/FontIcon.svelte';\n  import InputTextModal from '../modals/InputTextModal.svelte';\n  import { showModal } from '../modals/modalTools';\n  import { currentArchive } from '../stores';\n  import { apiCall } from '../utility/api';\n  import { useArchiveFiles, useArchiveFolders } from '../utility/metadataLoaders';\n  import openNewTab from '../utility/openNewTab';\n  import WidgetsInnerContainer from './WidgetsInnerContainer.svelte';\n\n  let filter = '';\n\n  $: folder = $currentArchive;\n  $: files = useArchiveFiles({ folder });\n\n  const handleRefreshFiles = () => {\n    apiCall('archive/refresh-files', { folder });\n  };\n\n  function handleNewJsonLines() {\n    showModal(InputTextModal, {\n      value: '',\n      label: 'New file name',\n      header: 'Create new JSON lines',\n      onConfirm: async file => {\n        await apiCall('archive/save-rows', {\n          folder: $currentArchive,\n          file,\n          rows: [\n            { id: 1, value: 'val1' },\n            { id: 1, value: 'val2' },\n          ],\n        });\n\n        openNewTab({\n          title: file,\n          icon: 'img archive',\n          tabComponent: 'ArchiveFileTab',\n          props: {\n            archiveFile: file,\n            archiveFolder: $currentArchive,\n          },\n        });\n      },\n    });\n  }\n\n  function createAddMenu() {\n    return [{ text: 'New NDJSON file', onClick: handleNewJsonLines }];\n  }\n</script>\n\n<SearchBoxWrapper>\n  <SearchInput placeholder=\"Search archive files\" bind:value={filter} />\n\n  <CloseSearchButton bind:filter />\n  <DropDownButton icon=\"icon plus-thick\" menu={createAddMenu} />\n  <InlineButton on:click={handleRefreshFiles} title=\"Refresh files of selected archive folder\">\n    <FontIcon icon=\"icon refresh\" />\n  </InlineButton>\n</SearchBoxWrapper>\n<WidgetsInnerContainer>\n  <AppObjectList\n    list={($files || []).map(file => ({\n      fileName: file.name,\n      folderName: folder,\n      fileType: file.type,\n      fileLabel: file.label,\n    }))}\n    groupFunc={data => ARCHIVE_LABELS[data.fileType] || 'Archive'}\n    module={archiveFileAppObject}\n    {filter}\n  />\n</WidgetsInnerContainer>\n"],"names":["ctx","getArchiveIcon","dirty","__awaiter","this","thisArg","_arguments","P","generator","archiveFileAppObject","appobjectlist_changes","filter","value","file","folder","func_1","data","ARCHIVE_LABELS"],"mappings":"ydAsMMA,EAAW,CAAA,cAER,CAAA,MAAAA,KAAK,SAAS,EACf,CAAA,KAAAC,EAAeD,EAAI,CAAA,CAAA,CAAA,QACnBA,EAAU,CAAA,CAAA,4FACNA,EAAW,CAAA,CAAA,mFALjBA,EAAW,CAAA,CAAA,mBAERE,EAAA,GAAA,CAAA,MAAAF,KAAK,SAAS,EACfE,EAAA,GAAA,CAAA,KAAAD,EAAeD,EAAI,CAAA,CAAA,CAAA,aACnBA,EAAU,CAAA,CAAA,iGA1MgB,IAAAG,GAAAC,YAAAA,WAAA,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA;kuBAgEjB,IAAAL,EAAA,MAAA,KAAA,WAAA,SAAAE,EAAAC,EAAAC,EAAAC,EAAA,o8ECc6CR,EAAM,CAAA,IAAA,iBAANA,EAAM,CAAA,oNAGrBA,EAAa,CAAA,+HAClCA,EAAkB,CAAA,CAAA,mNAJkBA,EAAM,CAAA,2aAUzD,MAAAA,UAAc,IAAGA,EAAA,CAAA,CAAA,yBAOhBS,iFAPDP,EAAA,IAAAQ,EAAA,MAAAV,UAAc,IAAGA,EAAA,CAAA,CAAA,gmBAxFMI,YAAAA,WAAA,yTAYjB,IAAAD,EAAA,MAAA,KAAA,WAAA,SAAAE,EAAAC,EAAAC,EAAAC,EAAA,ouBAkE6CG,EAAMC,0CAUvCC,IAAI,CAC3B,SAAUA,EAAK,KACf,WAAYC,EACZ,SAAUD,EAAK,KACf,UAAWA,EAAK,QAEPE,EAAAC,GAAQC,GAAeD,EAAK,QAAQ,GAAK"}