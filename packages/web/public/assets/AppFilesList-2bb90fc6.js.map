{"version":3,"file":"AppFilesList-2bb90fc6.js","sources":["../../src/appobj/AppFileAppObject.svelte","../../src/widgets/AppFilesList.svelte"],"sourcesContent":["<script lang=\"ts\" context=\"module\">\n  async function openTextFile(fileName, fileType, folderName, tabComponent, icon) {\n    const connProps: any = {};\n    let tooltip = undefined;\n\n    const resp = await apiCall('files/load', {\n      folder: 'app:' + folderName,\n      file: fileName + '.' + fileType,\n      format: 'text',\n    });\n\n    openNewTab(\n      {\n        title: fileName,\n        icon,\n        tabComponent,\n        tooltip,\n        props: {\n          savedFile: fileName + '.' + fileType,\n          savedFolder: 'app:' + folderName,\n          savedFormat: 'text',\n          appFolder: folderName,\n          ...connProps,\n        },\n      },\n      { editor: resp }\n    );\n  }\n\n  export const extractKey = data => data.fileName;\n  export const createMatcher =\n    ({ fileName }) =>\n    filter =>\n      filterName(filter, fileName);\n  const APP_ICONS = {\n    'config.json': 'img json',\n    'command.sql': 'img app-command',\n    'query.sql': 'img app-query',\n  };\n\n  function getAppIcon(data) {\n    return APP_ICONS[data.fileType];\n  }\n</script>\n\n<script lang=\"ts\">\n  import _ from 'lodash';\n  import { filterName } from 'dbgate-tools';\n  import { showModal } from '../modals/modalTools';\n\n  import openNewTab from '../utility/openNewTab';\n  import AppObjectCore from './AppObjectCore.svelte';\n  import InputTextModal from '../modals/InputTextModal.svelte';\n  import ConfirmModal from '../modals/ConfirmModal.svelte';\n  import { apiCall } from '../utility/api';\n\n  export let data;\n\n  const handleRename = () => {\n    showModal(InputTextModal, {\n      value: data.fileName,\n      label: 'New file name',\n      header: 'Rename file',\n      onConfirm: newFile => {\n        apiCall('apps/rename-file', {\n          file: data.fileName,\n          folder: data.folderName,\n          fileType: data.fileType,\n          newFile,\n        });\n      },\n    });\n  };\n\n  const handleDelete = () => {\n    showModal(ConfirmModal, {\n      message: `Really delete file ${data.fileName}?`,\n      onConfirm: () => {\n        apiCall('apps/delete-file', {\n          file: data.fileName,\n          folder: data.folderName,\n          fileType: data.fileType,\n        });\n      },\n    });\n  };\n  const handleClick = () => {\n    if (data.fileType.endsWith('.sql')) {\n      handleOpenSqlFile();\n    }\n    if (data.fileType.endsWith('.json')) {\n      handleOpenJsonFile();\n    }\n  };\n  const handleOpenSqlFile = () => {\n    openTextFile(data.fileName, data.fileType, data.folderName, 'QueryTab', 'img sql-file');\n  };\n  const handleOpenJsonFile = () => {\n    openTextFile(data.fileName, data.fileType, data.folderName, 'JsonEditorTab', 'img json');\n  };\n\n  function createMenu() {\n    return [\n      { text: 'Delete', onClick: handleDelete },\n      { text: 'Rename', onClick: handleRename },\n      data.fileType.endsWith('.sql') && { text: 'Open SQL', onClick: handleOpenSqlFile },\n      data.fileType.endsWith('.json') && { text: 'Open JSON', onClick: handleOpenJsonFile },\n\n      // data.fileType.endsWith('.yaml') && { text: 'Open YAML', onClick: handleOpenYamlFile },\n    ];\n  }\n</script>\n\n<AppObjectCore\n  {...$$restProps}\n  {data}\n  title={data.fileLabel}\n  icon={getAppIcon(data)}\n  menu={createMenu}\n  on:click={handleClick}\n/>\n","<script lang=\"ts\" context=\"module\">\n  const APP_LABELS = {\n    'command.sql': 'SQL commands',\n    'query.sql': 'SQL queries',\n  };\n\n  const COMMAND_TEMPLATE = `-- Write SQL command here\n-- After save, you can execute it from database context menu, for all databases, which use this application\n`;\n\n  const QUERY_TEMPLATE = `-- Write SQL query here\n-- After save, you can view it in tables list, for all databases, which use this application\n`;\n</script>\n\n<script lang=\"ts\">\n  import { createFreeTableModel } from 'dbgate-datalib';\n\n  import _ from 'lodash';\n\n  import AppObjectList from '../appobj/AppObjectList.svelte';\n  import * as appFileAppObject from '../appobj/AppFileAppObject.svelte';\n  import CloseSearchButton from '../buttons/CloseSearchButton.svelte';\n  import DropDownButton from '../buttons/DropDownButton.svelte';\n\n  import InlineButton from '../buttons/InlineButton.svelte';\n\n  import SearchBoxWrapper from '../elements/SearchBoxWrapper.svelte';\n  import SearchInput from '../elements/SearchInput.svelte';\n  import FontIcon from '../icons/FontIcon.svelte';\n  import InputTextModal from '../modals/InputTextModal.svelte';\n  import { showModal } from '../modals/modalTools';\n  import newQuery from '../query/newQuery';\n  import { currentApplication } from '../stores';\n  import { apiCall } from '../utility/api';\n  import { useAppFiles, useArchiveFolders } from '../utility/metadataLoaders';\n  import openNewTab from '../utility/openNewTab';\n  import WidgetsInnerContainer from './WidgetsInnerContainer.svelte';\n  import { showSnackbarError } from '../utility/snackbar';\n\n  let filter = '';\n\n  $: folder = $currentApplication;\n  $: files = useAppFiles({ folder });\n\n  const handleRefreshFiles = () => {\n    apiCall('apps/refresh-files', { folder });\n  };\n\n  function handleNewSqlFile(fileType, header, initialData) {\n    showModal(InputTextModal, {\n      value: '',\n      label: 'New file name',\n      header,\n      onConfirm: async file => {\n        newQuery({\n          title: file,\n          initialData,\n          // @ts-ignore\n          savedFile: file + '.' + fileType,\n          savedFolder: 'app:' + $currentApplication,\n          savedFormat: 'text',\n          appFolder: $currentApplication,\n        });\n      },\n    });\n  }\n\n  async function handleNewConfigFile(fileName, content) {\n    if (!(await apiCall('apps/create-config-file', { fileName, content, appFolder: $currentApplication }))) {\n      showSnackbarError('File not created, probably already exists');\n    }\n  }\n\n  function createAddMenu() {\n    return [\n      {\n        text: 'New SQL command',\n        onClick: () => handleNewSqlFile('command.sql', 'Create new SQL command', COMMAND_TEMPLATE),\n      },\n      {\n        text: 'New SQL query',\n        onClick: () => handleNewSqlFile('query.sql', 'Create new SQL query', QUERY_TEMPLATE),\n      },\n      {\n        text: 'New virtual references file',\n        onClick: () => handleNewConfigFile('virtual-references.config.json', []),\n      },\n      {\n        text: 'New dictionary descriptions file',\n        onClick: () => handleNewConfigFile('dictionary-descriptions.config.json', []),\n      },\n\n      // { text: 'New query view', onClick: () => handleNewSqlFile('query.sql', 'Create new SQL query', QUERY_TEMPLATE) },\n    ];\n  }\n</script>\n\n<SearchBoxWrapper>\n  <SearchInput placeholder=\"Search application files\" bind:value={filter} />\n\n  <CloseSearchButton bind:filter />\n  <DropDownButton icon=\"icon plus-thick\" menu={createAddMenu} />\n  <InlineButton on:click={handleRefreshFiles} title=\"Refresh files of selected application\">\n    <FontIcon icon=\"icon refresh\" />\n  </InlineButton>\n</SearchBoxWrapper>\n<WidgetsInnerContainer>\n  <AppObjectList\n    list={($files || []).map(file => ({\n      fileName: file.name,\n      folderName: folder,\n      fileType: file.type,\n      fileLabel: file.label,\n    }))}\n    groupFunc={data => APP_LABELS[data.fileType] || 'App config'}\n    module={appFileAppObject}\n    {filter}\n  />\n</WidgetsInnerContainer>\n"],"names":["ctx","getAppIcon","dirty","__awaiter","this","thisArg","_arguments","P","generator","appFileAppObject","appobjectlist_changes","filter","value","file","folder","func_1","data","APP_LABELS"],"mappings":"kdAkHMA,EAAW,CAAA,cAER,CAAA,MAAAA,KAAK,SAAS,EACf,CAAA,KAAAC,EAAWD,EAAI,CAAA,CAAA,CAAA,QACfA,EAAU,CAAA,CAAA,4FACNA,EAAW,CAAA,CAAA,mFALjBA,EAAW,CAAA,CAAA,mBAERE,EAAA,GAAA,CAAA,MAAAF,KAAK,SAAS,EACfE,EAAA,GAAA,CAAA,KAAAD,EAAWD,EAAI,CAAA,CAAA,CAAA,aACfA,EAAU,CAAA,CAAA,iGAtHgB,IAAAG,GAAAC,YAAAA,WAAA,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA,i0BA6CjB,MAAA,KAAA,s2CCsDiDR,EAAM,CAAA,IAAA,iBAANA,EAAM,CAAA,oNAGzBA,EAAa,CAAA,4HAClCA,EAAkB,CAAA,CAAA,mNAJsBA,EAAM,CAAA,4aAU7D,MAAAA,UAAc,IAAGA,EAAA,CAAA,CAAA,yBAOhBS,iFAPDP,EAAA,IAAAQ,EAAA,MAAAV,UAAc,IAAGA,EAAA,CAAA,CAAA,kmBA7GMI,YAAAA,WAAA;;;;0HAejB,IAAAD,EAAA,MAAA,KAAA,WAAA,SAAAE,EAAAC,EAAAC,EAAAC,EAAA,wlCAoFiDG,EAAMC,0CAU3CC,IAAI,CAC3B,SAAUA,EAAK,KACf,WAAYC,EACZ,SAAUD,EAAK,KACf,UAAWA,EAAK,QAEPE,EAAAC,GAAQC,GAAWD,EAAK,QAAQ,GAAK"}