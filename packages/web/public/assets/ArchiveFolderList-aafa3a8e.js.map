{"version":3,"file":"ArchiveFolderList-aafa3a8e.js","sources":["../../src/appobj/ArchiveFolderAppObject.svelte","../../src/widgets/ArchiveFolderList.svelte"],"sourcesContent":["<script lang=\"ts\" context=\"module\">\n  export const extractKey = data => data.name;\n  export const createMatcher = data => filter => filterName(filter, data.name);\n</script>\n\n<script lang=\"ts\">\n  import _ from 'lodash';\n  import { extractPackageName, filterName } from 'dbgate-tools';\n\n  import { currentArchive, currentDatabase } from '../stores';\n\n  import openNewTab from '../utility/openNewTab';\n  import AppObjectCore from './AppObjectCore.svelte';\n  import newQuery from '../query/newQuery';\n  import { showModal } from '../modals/modalTools';\n  import ConfirmModal from '../modals/ConfirmModal.svelte';\n  import InputTextModal from '../modals/InputTextModal.svelte';\n  import ErrorMessageModal from '../modals/ErrorMessageModal.svelte';\n  import { apiCall } from '../utility/api';\n\n  export let data;\n\n  const handleDelete = () => {\n    showModal(ConfirmModal, {\n      message: data.name.endsWith('.link')\n        ? `Really delete link to folder ${data.name}? Folder content remains untouched.`\n        : `Really delete folder ${data.name}?`,\n      onConfirm: () => {\n        apiCall('archive/delete-folder', { folder: data.name });\n      },\n    });\n  };\n\n  const handleRename = () => {\n    const isLink = data.name.endsWith('.link');\n    const name = isLink ? data.name.slice(0, -5) : data.name;\n    const suffix = isLink ? '.link' : '';\n\n    showModal(InputTextModal, {\n      value: name,\n      label: 'New folder name',\n      header: 'Rename folder',\n      onConfirm: async newFolder => {\n        await apiCall('archive/rename-folder', {\n          folder: data.name,\n          newFolder: newFolder + suffix,\n        });\n        if ($currentArchive == data.name) {\n          $currentArchive = newFolder + suffix;\n        }\n      },\n    });\n  };\n\n  const handleGenerateDeployScript = () => {\n    openNewTab(\n      {\n        title: 'Shell #',\n        icon: 'img shell',\n        tabComponent: 'ShellTab',\n      },\n      {\n        editor: `// @require ${extractPackageName($currentDatabase.connection.engine)}\n        \nawait dbgateApi.deployDb(${JSON.stringify(\n          {\n            connection: {\n              ..._.omit($currentDatabase.connection, '_id', 'displayName'),\n              database: $currentDatabase.name,\n            },\n            modelFolder: `archive:${data.name}`,\n          },\n          undefined,\n          2\n        )})`,\n      }\n    );\n  };\n\n  const handleGenerateDeploySql = async () => {\n    const resp = await apiCall('database-connections/generate-deploy-sql', {\n      conid: $currentDatabase.connection._id,\n      database: $currentDatabase.name,\n      archiveFolder: data.name,\n    });\n\n    if (resp.errorMessage) {\n      showModal(ErrorMessageModal, { message: resp.errorMessage });\n    } else {\n      newQuery({ initialData: resp.sql });\n    }\n  };\n\n  const handleCompareWithCurrentDb = () => {\n    openNewTab(\n      {\n        title: 'Compare',\n        icon: 'img compare',\n        tabComponent: 'CompareModelTab',\n      },\n      {\n        editor: {\n          sourceConid: '__model',\n          sourceDatabase: `archive:${data.name}`,\n          targetConid: $currentDatabase?.connection?._id,\n          targetDatabase: $currentDatabase?.name,\n        },\n      }\n    );\n  };\n\n  const handleOpenDuplicatorTab = () => {\n    openNewTab(\n      {\n        title: data.name,\n        icon: 'img duplicator',\n        tabComponent: 'DataDuplicatorTab',\n        props: {\n          conid: $currentDatabase?.connection?._id,\n          database: $currentDatabase?.name,\n        },\n      },\n      {\n        editor: {\n          archiveFolder: data.name,\n        },\n      }\n    );\n  };\n\n  function createMenu() {\n    return [\n      data.name != 'default' && { text: 'Delete', onClick: handleDelete },\n      data.name != 'default' && { text: 'Rename', onClick: handleRename },\n      data.name != 'default' &&\n        $currentDatabase && [\n          { text: 'Data duplicator', onClick: handleOpenDuplicatorTab },\n          { text: 'Generate deploy DB SQL - experimental', onClick: handleGenerateDeploySql },\n          { text: 'Shell: Deploy DB - experimental', onClick: handleGenerateDeployScript },\n        ],\n\n      data.name != 'default' &&\n        _.get($currentDatabase, 'connection._id') && {\n          onClick: handleCompareWithCurrentDb,\n          text: `Compare with ${_.get($currentDatabase, 'name')}`,\n        },\n    ];\n  }\n</script>\n\n<AppObjectCore\n  {...$$restProps}\n  {data}\n  title={data.name.endsWith('.link') ? data.name.slice(0, -5) : data.name}\n  icon={data.name.endsWith('.link') ? 'img link' : 'img archive-folder'}\n  isBold={data.name == $currentArchive}\n  on:click={() => ($currentArchive = data.name)}\n  menu={createMenu}\n/>\n","<script lang=\"ts\">\n  import _ from 'lodash';\n\n  import AppObjectList from '../appobj/AppObjectList.svelte';\n  import * as archiveFolderAppObject from '../appobj/ArchiveFolderAppObject.svelte';\n  import runCommand from '../commands/runCommand';\n  import CloseSearchButton from '../buttons/CloseSearchButton.svelte';\n\n  import InlineButton from '../buttons/InlineButton.svelte';\n\n  import SearchBoxWrapper from '../elements/SearchBoxWrapper.svelte';\n  import SearchInput from '../elements/SearchInput.svelte';\n  import FontIcon from '../icons/FontIcon.svelte';\n  import { apiCall } from '../utility/api';\n  import { useArchiveFolders } from '../utility/metadataLoaders';\n  import WidgetsInnerContainer from './WidgetsInnerContainer.svelte';\n\n  let filter = '';\n\n  $: folders = useArchiveFolders();\n\n  const handleRefreshFolders = () => {\n    apiCall('archive/refresh-folders');\n  };\n</script>\n\n<SearchBoxWrapper>\n  <SearchInput placeholder=\"Search archive folders\" bind:value={filter} />\n  <CloseSearchButton bind:filter />\n  <InlineButton on:click={() => runCommand('new.archiveFolder')} title=\"Add new archive folder\">\n    <FontIcon icon=\"icon plus-thick\" />\n  </InlineButton>\n  <InlineButton on:click={handleRefreshFolders} title=\"Refresh archive folder list\">\n    <FontIcon icon=\"icon refresh\" />\n  </InlineButton>\n</SearchBoxWrapper>\n<WidgetsInnerContainer>\n  <AppObjectList list={_.sortBy($folders, 'name')} module={archiveFolderAppObject} {filter} />\n</WidgetsInnerContainer>\n"],"names":["ctx","this","__awaiter","thisArg","_arguments","P","generator","$currentArchive","data","_","archiveFolderAppObject","dirty","appobjectlist_changes","filter","value","click_handler","runCommand"],"mappings":"ueAuJMA,EAAW,CAAA,eAER,MAAAA,EAAK,CAAA,EAAA,KAAK,SAAS,OAAO,EAAIA,KAAK,KAAK,MAAM,IAAK,EAAIA,KAAK,OAC7D,KAAAA,EAAK,CAAA,EAAA,KAAK,SAAS,OAAO,EAAI,WAAa,8BACzCA,EAAI,CAAA,EAAC,MAAQA,EAAe,CAAA,SAE9BA,EAAU,CAAA,CAAA,oLANZA,EAAW,CAAA,CAAA,yBAER,MAAAA,EAAK,CAAA,EAAA,KAAK,SAAS,OAAO,EAAIA,KAAK,KAAK,MAAM,IAAK,EAAIA,KAAK,YAC7D,KAAAA,EAAK,CAAA,EAAA,KAAK,SAAS,OAAO,EAAI,WAAa,mCACzCA,EAAI,CAAA,EAAC,MAAQA,EAAe,CAAA,cAE9BA,EAAU,CAAA,CAAA,iGA7JgBC,YAAAA,WAAA,yJAKjB,IAAAC,EAAA,MAAA,KAAA,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA;;myCAuJEC,EAAkBC,EAAK,KAAID,CAAA,wyBCjIkBP,EAAM,CAAA,IAAA,iBAANA,EAAM,CAAA,gYAK5CA,EAAoB,CAAA,CAAA,mNALkBA,EAAM,CAAA,keAU/C,KAAAS,EAAE,OAAOT,KAAU,MAAM,SAAWU,iFAApCC,EAAA,IAAAC,EAAA,KAAAH,EAAE,OAAOT,KAAU,MAAM,+vBAVgBa,EAAMC,kCAEtC,MAAAC,EAAA,IAAAC,GAAW,mBAAmB"}