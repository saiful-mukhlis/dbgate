"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = exports.logLevelNumbers = exports.logLevelNames = void 0;
class PinoLikeLogger {
    constructor(config) {
        this.config = {
            targets: (config === null || config === void 0 ? void 0 : config.targets) || [{ type: 'console', level: 'info' }],
            base: (config === null || config === void 0 ? void 0 : config.base) || {},
        };
    }
    trace(data, msg) {
        this.log(this.packRecord(exports.logLevelNumbers.trace, data, msg));
    }
    debug(data, msg) {
        this.log(this.packRecord(exports.logLevelNumbers.debug, data, msg));
    }
    info(data, msg) {
        this.log(this.packRecord(exports.logLevelNumbers.info, data, msg));
    }
    warn(data, msg) {
        this.log(this.packRecord(exports.logLevelNumbers.warn, data, msg));
    }
    error(data, msg) {
        this.log(this.packRecord(exports.logLevelNumbers.error, data, msg));
    }
    fatal(data, msg) {
        this.log(this.packRecord(exports.logLevelNumbers.fatal, data, msg));
    }
    packRecord(level, data, msg) {
        if (msg) {
            return Object.assign(Object.assign(Object.assign({}, this.config.base), data), { level,
                msg, time: new Date().getTime() });
        }
        return Object.assign(Object.assign({}, this.config.base), { level, msg: data, time: new Date().getTime() });
    }
    log(record) {
        for (const target of this.config.targets) {
            if (record.level < exports.logLevelNames[target.level]) {
                continue;
            }
            switch (target.type) {
                case 'console':
                    console.log(JSON.stringify(record));
                    break;
                case 'stream':
                    target.stream.write(JSON.stringify(record) + '\n');
                    break;
            }
        }
    }
    child(childProps) {
        return new PinoLikeLogger(Object.assign(Object.assign({}, this.config), { base: Object.assign(Object.assign({}, this.config.base), childProps) }));
    }
}
exports.logLevelNames = {
    10: 'trace',
    20: 'debug',
    30: 'info',
    40: 'warn',
    50: 'error',
    60: 'fatal',
};
exports.logLevelNumbers = {
    trace: 10,
    debug: 20,
    info: 30,
    warn: 40,
    error: 50,
    fatal: 60,
};
function createLogger(config) {
    return new PinoLikeLogger(config);
}
exports.createLogger = createLogger;
exports.default = createLogger;
