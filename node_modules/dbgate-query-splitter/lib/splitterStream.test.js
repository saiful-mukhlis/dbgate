"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const options_1 = require("./options");
const stream_1 = __importDefault(require("stream"));
const splitQueryStream_1 = require("./splitQueryStream");
const fs_1 = __importDefault(require("fs"));
function createInputStream(...lines) {
    const pass = new stream_1.default.PassThrough({
        objectMode: true,
    });
    lines.forEach(line => pass.write(line));
    pass.end();
    return pass;
}
function streamToArray(streamSource) {
    return new Promise((resolve, reject) => {
        const res = [];
        streamSource.on('data', x => res.push(x));
        streamSource.on('end', () => resolve(res));
    });
}
test('stream: simple query', () => __awaiter(void 0, void 0, void 0, function* () {
    const output = yield streamToArray((0, splitQueryStream_1.splitQueryStream)(createInputStream('select * from A'), options_1.mysqlSplitterOptions));
    expect(output).toEqual(['select * from A']);
}));
test('stream: query on 2 buffers', () => __awaiter(void 0, void 0, void 0, function* () {
    const output = yield streamToArray((0, splitQueryStream_1.splitQueryStream)(createInputStream('select * ', 'from A'), options_1.mysqlSplitterOptions));
    expect(output).toEqual(['select * from A']);
}));
test('stream: 2 queries on more buffers', () => __awaiter(void 0, void 0, void 0, function* () {
    const output = yield streamToArray((0, splitQueryStream_1.splitQueryStream)(createInputStream('SELECT * ', 'FROM `table1`;', 'SELECT *', ' FROM `table2`'), options_1.mysqlSplitterOptions));
    expect(output).toEqual(['SELECT * FROM `table1`', 'SELECT * FROM `table2`']);
}));
test('file stream', () => __awaiter(void 0, void 0, void 0, function* () {
    fs_1.default.writeFileSync('testdata.sql', 'select *\n  from A;\nselect * from B');
    const fileStream = fs_1.default.createReadStream('testdata.sql', 'utf-8');
    const output = yield streamToArray((0, splitQueryStream_1.splitQueryStream)(fileStream, options_1.mysqlSplitterOptions));
    expect(output).toEqual(['select *\n  from A', 'select * from B']);
}));
test('delimiter stream test', () => __awaiter(void 0, void 0, void 0, function* () {
    const output = yield streamToArray((0, splitQueryStream_1.splitQueryStream)(createInputStream('SELECT\n1;', '\n DELIMITER $$\n', ' SELECT\n2; SELECT\n3;', ' \n DELIMITER ;'), options_1.mysqlSplitterOptions));
    expect(output).toEqual(['SELECT\n1', 'SELECT\n2; SELECT\n3;']);
}));
test('splitted delimiter stream test', () => __awaiter(void 0, void 0, void 0, function* () {
    const output = yield streamToArray((0, splitQueryStream_1.splitQueryStream)(createInputStream('SELECT\n1;\n', 'DELI', 'MITER $', '$\n', ' SELECT\n2; SELECT\n3;', ' \n DELIMITER ;'), options_1.mysqlSplitterOptions));
    expect(output).toEqual(['SELECT\n1', 'SELECT\n2; SELECT\n3;']);
}));
test('northwind test', () => __awaiter(void 0, void 0, void 0, function* () {
    console.log(process.cwd());
    const fileStream = fs_1.default.createReadStream('sql/northwind.sql', 'utf-8');
    const output = yield streamToArray((0, splitQueryStream_1.splitQueryStream)(fileStream, options_1.mysqlSplitterOptions));
    expect(output['length']).toEqual(29);
}));
