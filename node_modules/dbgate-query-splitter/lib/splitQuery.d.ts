import { SplitterOptions } from './options';
export interface SplitStreamContext {
    options: SplitterOptions;
    currentDelimiter: string;
    pushOutput: (item: SplitResultItem) => void;
    commandPart: string;
    line: number;
    column: number;
    streamPosition: number;
    noWhiteLine: number;
    noWhiteColumn: number;
    noWhitePosition: number;
    commandStartPosition: number;
    commandStartLine: number;
    commandStartColumn: number;
    trimCommandStartPosition: number;
    trimCommandStartLine: number;
    trimCommandStartColumn: number;
    wasDataInCommand: boolean;
}
export interface SplitLineContext extends SplitStreamContext {
    source: string;
    position: number;
    end: number;
    wasDataOnLine: boolean;
    currentCommandStart: number;
}
export interface SplitPositionDefinition {
    position: number;
    line: number;
    column: number;
}
export interface SplitResultItemRich {
    text: string;
    start: SplitPositionDefinition;
    end: SplitPositionDefinition;
    trimStart?: SplitPositionDefinition;
    trimEnd?: SplitPositionDefinition;
}
export declare type SplitResultItem = string | SplitResultItemRich;
export declare function splitQueryLine(context: SplitLineContext): void;
export declare function getInitialDelimiter(options: SplitterOptions): string;
export declare function finishSplitStream(context: SplitStreamContext): void;
export declare function splitQuery(sql: string, options?: SplitterOptions): SplitResultItem[];
