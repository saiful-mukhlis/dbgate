"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseDumper = void 0;
const fs_1 = __importDefault(require("fs"));
const zlib_1 = require("zlib");
const path_1 = __importDefault(require("path"));
const events_1 = __importDefault(require("events"));
class BaseDumper extends events_1.default {
    constructor(tables, options) {
        super();
        this._tables = tables;
        this._options = options;
        this._isCancelled = false;
        this._outputFileStream = fs_1.default.createWriteStream(this._options.outputFile, {
            flags: "w",
        });
        this._processedStream = null;
        this._state = {};
        if (this._options.compress) {
            const outputZipStream = (0, zlib_1.createGzip)();
            outputZipStream.pipe(this._outputFileStream);
            this._processedStream = outputZipStream;
        }
        else {
            this._processedStream = this._outputFileStream;
        }
        this._processedStream.once("error", (err) => {
            this._isCancelled = true;
            this.emit("error", err);
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.emit("start", this);
                yield this.dump();
            }
            catch (err) {
                this.emit("error", err);
                throw err;
            }
            finally {
                this._processedStream.end();
                this.emit("end");
            }
        });
    }
    get isCancelled() {
        return this._isCancelled;
    }
    get outputFile() {
        return this._options.outputFile;
    }
    outputFileExists() {
        return fs_1.default.existsSync(this._options.outputFile);
    }
    cancel() {
        this._isCancelled = true;
        this.emit("cancel");
        this.emitUpdate({ op: "cancelling" });
    }
    emitUpdate(state) {
        this.emit("progress", Object.assign(Object.assign({}, this._state), state));
    }
    writeString(data) {
        if (this._isCancelled)
            return;
        try {
            fs_1.default.accessSync(this._options.outputFile);
        }
        catch (err) {
            this._isCancelled = true;
            const fileName = path_1.default.basename(this._options.outputFile);
            this.emit("error", `The file ${fileName} is not accessible`);
        }
        this._processedStream.write(data);
    }
    dump() {
        throw new Error('Exporter must implement the "dump" method');
    }
}
exports.BaseDumper = BaseDumper;
