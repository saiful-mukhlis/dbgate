"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dumpTest = exports.dump = exports.createClient = exports.script = exports.query = void 0;
const crypto_1 = __importDefault(require("crypto"));
const mysql2_1 = __importDefault(require("mysql2"));
const fs_1 = __importDefault(require("fs"));
const dbgate_query_splitter_1 = require("dbgate-query-splitter");
const MySqlDumper_1 = require("../MySqlDumper");
const MySqlClient_1 = require("../MySqlClient");
function randomDbName() {
    const generatedKey = crypto_1.default.randomBytes(6);
    const newKey = generatedKey.toString("hex");
    return `db${newKey}`;
}
function randomFileName() {
    const generatedKey = crypto_1.default.randomBytes(6);
    const newKey = generatedKey.toString("hex");
    return `output/file${newKey}.sql`;
}
function query(connection, sql) {
    return new Promise((resolve, reject) => {
        connection.query(sql, function (error, results, fields) {
            if (error)
                reject(error);
            resolve(results);
        });
    });
}
exports.query = query;
function script(connection, sql) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const cmd of (0, dbgate_query_splitter_1.splitQuery)(sql, dbgate_query_splitter_1.mysqlSplitterOptions)) {
            yield query(connection, cmd);
        }
    });
}
exports.script = script;
function createClient() {
    return __awaiter(this, void 0, void 0, function* () {
        const database = randomDbName();
        const options = {
            host: process.env.HOST || "mysql",
            port: process.env.PORT ? parseInt(process.env.PORT) : 3306,
            user: "root",
            password: "TestPwd",
        };
        const connection = mysql2_1.default.createConnection(options);
        yield query(connection, `CREATE DATABASE ${database}`);
        connection.destroy();
        const dbConnection = mysql2_1.default.createConnection(Object.assign(Object.assign({}, options), { database }));
        const client = new MySqlClient_1.MySqlClient(dbConnection, database);
        return client;
    });
}
exports.createClient = createClient;
function dump(client, outputFile) {
    return new Promise((resolve, reject) => {
        const dumper = new MySqlDumper_1.MySqlDumper({
            connection: client.connection,
            schema: client.schema,
            outputFile,
            // includes: {
            //   views: true,
            //   triggers: true,
            //   routines: true,
            //   functions: true,
            //   schedulers: true,
            // },
            // compress: false,
            // sqlInsertAfter: 250,
            // sqlInsertDivider: "bytes",
        });
        dumper.once("end", () => {
            resolve(true);
        });
        dumper.once("error", (err) => {
            reject(err);
        });
        dumper.run();
    });
}
exports.dump = dump;
function dumpTest(dataSql, check) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileName = randomFileName();
        const client = yield createClient();
        yield script(client.connection, dataSql);
        yield dump(client, fileName);
        yield client.connection.destroy();
        const client2 = yield createClient();
        yield script(client2.connection, fs_1.default.readFileSync(fileName, { encoding: "utf-8" }));
        yield check(client2);
        yield client2.connection.destroy();
    });
}
exports.dumpTest = dumpTest;
