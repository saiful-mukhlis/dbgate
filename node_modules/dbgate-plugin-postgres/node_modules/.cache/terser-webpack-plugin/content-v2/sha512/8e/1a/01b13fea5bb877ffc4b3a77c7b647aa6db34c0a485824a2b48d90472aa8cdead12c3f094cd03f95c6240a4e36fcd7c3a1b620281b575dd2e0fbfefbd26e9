{"code":"var plugin=function(e){var t={};function a(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,a),s.l=!0,s.exports}return a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var s in e)a.d(n,s,function(t){return e[t]}.bind(null,s));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,\"a\",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p=\"\",a(a.s=1)}([function(e,t,a){const{driverBase:n}=window.DBGATE_TOOLS,s=a(2),{postgreSplitterOptions:i}=a(3),r=[\"GEOGRAPHY\"],l={rangeSelect:!0,ilike:!0,defaultSchemaName:\"public\",stringEscapeChar:\"'\",fallbackDataType:\"varchar\",anonymousPrimaryKey:!0,enableConstraintsPerTable:!0,dropColumnDependencies:[\"dependencies\"],quoteIdentifier:e=>'\"'+e+'\"',stringAgg:!0,createColumn:!0,dropColumn:!0,changeColumn:!0,createIndex:!0,dropIndex:!0,createForeignKey:!0,dropForeignKey:!0,createPrimaryKey:!0,dropPrimaryKey:!0,createUnique:!0,dropUnique:!0,createCheck:!0,dropCheck:!0,dropReferencesWhenDropTable:!0,requireStandaloneSelectForScopeIdentity:!0,predefinedDataTypes:[\"bigint\",\"bigserial\",\"bit\",\"varbit\",\"boolean\",\"box\",\"bytea\",\"char(20)\",\"varchar(250)\",\"cidr\",\"circle\",\"date\",\"double precision\",\"inet\",\"int\",\"interval\",\"json\",\"jsonb\",\"line\",\"lseg\",\"macaddr\",\"macaddr8\",\"money\",\"numeric(10,2)\",\"path\",\"pg_lsn\",\"pg_snapshot\",\"point\",\"polygon\",\"real\",\"smallint\",\"smallserial\",\"serial\",\"text\",\"time\",\"timetz\",\"timestamp\",\"timestamptz\",\"tsquery\",\"tsvector\",\"txid_snapshot\",\"uuid\",\"xml\"],createColumnViewExpression(e,t,a,n){if(t&&r.includes(t.toUpperCase()))return{exprType:\"call\",func:\"ST_AsText\",alias:n||e,args:[{exprType:\"column\",columnName:e,source:a}]}}},o={...n,dumperClass:s,dialect:l,getQuerySplitterOptions:e=>\"editor\"==e?{...i,ignoreComments:!0,preventSingleLineSplit:!0}:i,readOnlySessions:!0,databaseUrlPlaceholder:\"e.g. postgresql://user:password@localhost:5432/default_database\",showConnectionField:(e,t)=>\"useDatabaseUrl\"==e||(t.useDatabaseUrl?[\"databaseUrl\",\"isReadOnly\"].includes(e):[\"authType\",\"user\",\"password\",\"defaultDatabase\",\"singleDatabase\",\"isReadOnly\"].includes(e)||\"socket\"==t.authType&&[\"socketPath\"].includes(e)||\"socket\"!=t.authType&&[\"server\",\"port\"].includes(e)),beforeConnectionSave:e=>{const{databaseUrl:t}=e;if(t){const a=t.match(/\\/([^/]+)($|\\?)/);return{...e,singleDatabase:!!a,defaultDatabase:a?a[1]:null}}return e},__analyserInternals:{},getNewObjectTemplates:()=>[{label:\"New view\",sql:\"CREATE VIEW myview\\nAS\\nSELECT * FROM table1\"},{label:\"New materialized view\",sql:\"CREATE MATERIALIZED VIEW myview\\nAS\\nSELECT * FROM table1\"},{label:\"New procedure\",sql:\"CREATE PROCEDURE myproc (arg1 INT)\\nLANGUAGE SQL \\nAS $$\\n  SELECT * FROM table1;\\n$$\"},{label:\"New function (plpgsql)\",sql:\"CREATE FUNCTION myfunc (arg1 INT)\\nRETURNS INT\\nAS $$\\nBEGIN\\n  RETURN 1;\\nEND\\n$$ LANGUAGE plpgsql;\"}],authTypeLabel:\"Connection mode\",defaultAuthTypeName:\"hostPort\",defaultSocketPath:\"/var/run/postgresql\"},u={...o,engine:\"postgres@dbgate-plugin-postgres\",title:\"PostgreSQL\",defaultPort:5432,dialect:{...l,materializedViews:!0},dialectByVersion:e=>e?{...l,materializedViews:e&&null!=e.versionMajor&&null!=e.versionMinor&&(e.versionMajor>9||9==e.versionMajor||e.versionMinor>=3)}:l},p={...o,engine:\"cockroach@dbgate-plugin-postgres\",title:\"CockroachDB\",defaultPort:26257,dialect:{...l,materializedViews:!0,dropColumnDependencies:[\"primaryKey\",\"dependencies\"],dropPrimaryKey:!1},__analyserInternals:{}},c={...o,dialect:{...l,stringAgg:!1},__analyserInternals:{skipIndexes:!0},engine:\"redshift@dbgate-plugin-postgres\",title:\"Amazon Redshift\",defaultPort:5439,databaseUrlPlaceholder:\"e.g. redshift-cluster-1.xxxx.redshift.amazonaws.com:5439/dev\",showConnectionField:(e,t)=>[\"databaseUrl\",\"user\",\"password\",\"isReadOnly\"].includes(e),beforeConnectionSave:e=>{const{databaseUrl:t}=e;if(t){const a=t.match(/\\/([^/]+)$/);if(a)return{...e,singleDatabase:!0,defaultDatabase:a[1]}}return e}};e.exports=[u,p,c]},function(e,t,a){\"use strict\";a.r(t);var n=a(0),s=a.n(n);t.default={packageName:\"dbgate-plugin-postgres\",drivers:s()}},function(e,t){const{SqlDumper:a,arrayToHexString:n,testEqualTypes:s}=window.DBGATE_TOOLS;e.exports=class extends a{transform(e,t){switch(e){case\"GROUP:YEAR\":case\"YEAR\":this.put(\"^extract(^year ^from %c)\",t);break;case\"MONTH\":this.put(\"^extract(^month ^from %c)\",t);break;case\"DAY\":this.put(\"^extract(^day ^from %c)\",t);break;case\"GROUP:MONTH\":this.put(\"^to_char(%c, '%s')\",t,\"YYYY-MM\");break;case\"GROUP:DAY\":this.put(\"^to_char(%c, '%s')\",t,\"YYYY-MM-DD\");break;default:t()}}dropDatabase(e){this.putCmd(\"^drop ^database %i ^with(^force)\",e)}dropRecreatedTempTable(e){this.putCmd(\"^drop ^table %i ^cascade\",e)}renameTable(e,t){this.putCmd(\"^alter ^table %f ^rename ^to %i\",e,t)}renameColumn(e,t){this.putCmd(\"^alter ^table %f ^rename ^column %i ^to %i\",e,e.columnName,t)}dropTable(e,t={}){this.put(\"^drop ^table\"),t.testIfExists&&this.put(\" ^if ^exists\"),this.put(\" %f\",e),this.endCommand()}enableConstraints(e,t){this.putCmd(\"^alter ^table %f %k ^trigger ^all\",e,t?\"enable\":\"disable\")}columnDefinition(e,t){e.autoIncrement?this.put(\"^serial\"):super.columnDefinition(e,t)}changeColumn(e,t,a){e.columnName!=t.columnName&&this.putCmd(\"^alter ^table %f ^rename ^column %i ^to %i\",e,e.columnName,t.columnName),s(e,t)||this.putCmd(\"^alter ^table %f ^alter ^column %i ^type %s\",e,t.columnName,t.dataType),e.notNull!=t.notNull&&(t.notNull?this.putCmd(\"^alter ^table %f ^alter ^column %i ^set ^not ^null\",t,t.columnName):this.putCmd(\"^alter ^table %f ^alter ^column %i ^drop ^not ^null\",t,t.columnName)),e.defaultValue!=t.defaultValue&&(null==t.defaultValue?this.putCmd(\"^alter ^table %f ^alter ^column %i ^drop ^default\",t,t.columnName):this.putCmd(\"^alter ^table %f ^alter ^column %i ^set ^default %s\",t,t.columnName,t.defaultValue))}putValue(e){!0===e?this.putRaw(\"true\"):!1===e?this.putRaw(\"false\"):super.putValue(e)}putByteArrayValue(e){this.putRaw(`e'\\\\\\\\x${n(e)}'`)}selectScopeIdentity(e){const t=e.columns&&e.columns.find(e=>e.autoIncrement);this.put(\"^SELECT currval(pg_get_serial_sequence('%f','%s'))\",e,t?t.columnName:null)}}},function(e,t,a){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.redisSplitterOptions=t.noSplitSplitterOptions=t.mongoSplitterOptions=t.sqliteSplitterOptions=t.postgreSplitterOptions=t.mssqlSplitterOptions=t.mysqlSplitterOptions=t.defaultSplitterOptions=void 0,t.defaultSplitterOptions={stringsBegins:[\"'\"],stringsEnds:{\"'\":\"'\"},stringEscapes:{\"'\":\"'\"},allowSemicolon:!0,allowCustomDelimiter:!1,allowGoDelimiter:!1,allowDollarDollarString:!1,noSplit:!1,doubleDashComments:!0,multilineComments:!0,javaScriptComments:!1,returnRichInfo:!1,splitByLines:!1,preventSingleLineSplit:!1,adaptiveGoSplit:!1,ignoreComments:!1},t.mysqlSplitterOptions=Object.assign(Object.assign({},t.defaultSplitterOptions),{allowCustomDelimiter:!0,stringsBegins:[\"'\",\"`\"],stringsEnds:{\"'\":\"'\",\"`\":\"`\"},stringEscapes:{\"'\":\"\\\\\",\"`\":\"`\"}}),t.mssqlSplitterOptions=Object.assign(Object.assign({},t.defaultSplitterOptions),{allowSemicolon:!1,allowGoDelimiter:!0,stringsBegins:[\"'\",\"[\"],stringsEnds:{\"'\":\"'\",\"[\":\"]\"},stringEscapes:{\"'\":\"'\"}}),t.postgreSplitterOptions=Object.assign(Object.assign({},t.defaultSplitterOptions),{allowDollarDollarString:!0,stringsBegins:[\"'\",'\"'],stringsEnds:{\"'\":\"'\",'\"':'\"'},stringEscapes:{\"'\":\"'\",'\"':'\"'}}),t.sqliteSplitterOptions=Object.assign(Object.assign({},t.defaultSplitterOptions),{stringsBegins:[\"'\",'\"'],stringsEnds:{\"'\":\"'\",'\"':'\"'},stringEscapes:{\"'\":\"'\",'\"':'\"'}}),t.mongoSplitterOptions=Object.assign(Object.assign({},t.defaultSplitterOptions),{stringsBegins:[\"'\",'\"'],stringsEnds:{\"'\":\"'\",'\"':'\"'},stringEscapes:{\"'\":\"\\\\\",'\"':\"\\\\\"}}),t.noSplitSplitterOptions=Object.assign(Object.assign({},t.defaultSplitterOptions),{noSplit:!0}),t.redisSplitterOptions=Object.assign(Object.assign({},t.defaultSplitterOptions),{splitByLines:!0})}]);","extractedComments":[]}